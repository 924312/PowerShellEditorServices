steps:

# TODO: Replace build artifacts with pipeline artifacts
- task: DownloadBuildArtifacts@0
  displayName: Download build artifacts
  inputs:
    downloadType: specific

- task: ExtractFiles@1
  displayName: Unzip build artifacts
  inputs:
    archiveFilePatterns: $(Build.ArtifactStagingDirectory)/PowerShellEditorServices-CI/PowerShellEditorServices*.zip
    destinationFolder: $(Build.ArtifactStagingDirectory)/Unsigned

- checkout: ComplianceRepo

# NOTE: The signing templates explicitly copy everything along as they run, so
# the last output path has every signed (and intentionally unsigned) file.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Build.ArtifactStagingDirectory)/Unsigned
    signOutputPath: $(Build.ArtifactStagingDirectory)/FirstPartySigned
    alwaysCopy: true
    certificateId: CP-230012 # Authenticode certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      # PowerShellEditorServices Script
      PowerShellEditorServices/*.{ps1,psd1,psm1,ps1xml}
      PowerShellEditorServices/Commands/**/*.{ps1,psd1,psm1,ps1xml}
      # PowerShellEditorServices Binaries
      PowerShellEditorServices/**/Microsoft.PowerShell.EditorServices*.dll
      # PowerShellEditorServices.VSCode Script
      PowerShellEditorServices.VSCode/PowerShellEditorServices.VSCode.psd1
      # PowerShellEditorServices.VSCode Binary
      PowerShellEditorServices.VSCode/bin/Microsoft.PowerShell.EditorServices.VSCode.dll

- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Build.ArtifactStagingDirectory)/FirstPartySigned
    signOutputPath: $(Build.ArtifactStagingDirectory)/ThirdPartySigned
    alwaysCopy: true
    certificateId: CP-231522 # Third-party certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      **/MediatR.dll
      **/Nerdbank.Streams.dll
      **/Newtonsoft.Json.dll
      **/OmniSharp*.dll
      **/Serilog*.dll
      **/UnixConsoleEcho.dll

- task: ArchiveFiles@2
  displayName: Zip finished assets
  inputs:
    rootFolderOrFile: $(Build.ArtifactStagingDirectory)/ThirdPartySigned
    includeRootFolder: false
    archiveType: zip
    archiveFile: $(Build.ArtifactStagingDirectory)/PowerShellEditorServices.zip
    replaceExistingArchive: true
    verbose: true

- publish: $(Build.ArtifactStagingDirectory)/PowerShellEditorServices.zip
  artifact: PowerShellEditorServices
  displayName: Publish signed pipeline artifacts

- checkout: self

- template: assembly-module-compliance.yml@ComplianceRepo
  parameters:
    # binskim
    AnalyzeTarget: '$(Build.ArtifactStagingDirectory)/*.dll'
    AnalyzeSymPath: 'SRV*'
    # component-governance
    sourceScanPath: '$(Build.SourcesDirectory)/PowerShellEditorServices'
    # credscan
    suppressionsFile: ''
    # TermCheck AKA PoliCheck
    targetArgument: '$(Build.SourcesDirectory)/PowerShellEditorServices'
    optionsUEPATH: '$(Build.SourcesDirectory)/PowerShellEditorServices/tools/terms/UserExclusions.xml'
    optionsRulesDBPath: ''
    optionsFTPath: '$(Build.SourcesDirectory)/PowerShellEditorServices/tools/terms/FileTypeSet.xml'
    # tsa-upload
    codeBaseName: 'PowerShell_PowerShellEditorServices_20210201'
    # selections
    APIScan: false
