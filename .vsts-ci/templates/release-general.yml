steps:

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    downloadType: specific

- task: ExtractFiles@1
  displayName: 'Extract Build Zip'
  inputs:
    archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/PowerShellEditorServices-CI/PowerShellEditorServices*.zip'
    destinationFolder: '$(Build.ArtifactStagingDirectory)/PowerShellEditorServices'

- checkout: ComplianceRepo
  displayName: 'Checkout the ComplianceRepo'

- template: EsrpSign.yml@ComplianceRepo
  parameters:
    # NOTE: All artifacts are copied to "Signed" even though only some are
    # actually signed. We then publish this folder below.
    buildOutputPath: '$(Build.ArtifactStagingDirectory)/PowerShellEditorServices'
    signOutputPath: '$(Build.ArtifactStagingDirectory)/Signed'
    certificateId: 'CP-230012' # Authenticode certificate.
    useMinimatch: true
    pattern: |
      # PowerShellEditorServices Script
      PowerShellEditorServices/*.{ps1,psd1,psm1,ps1xml}
      PowerShellEditorServices/Commands/**/*.{ps1,psd1,psm1,ps1xml}
      # PowerShellEditorServices Binaries
      PowerShellEditorServices/**/Microsoft.PowerShell.EditorServices*.dll
      # PowerShellEditorServices.VSCode Script
      PowerShellEditorServices.VSCode/PowerShellEditorServices.VSCode.psd1
      # PowerShellEditorServices.VSCode Binary
      PowerShellEditorServices.VSCode/bin/Microsoft.PowerShell.EditorServices.VSCode.dll

- publish: $(Build.ArtifactStagingDirectory)/Signed
  artifact: PowerShellEditorServices
  displayName: 'Publish signed (and unsigned) artifacts'

# TODO: Use templates for compliance checks
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- task: AntiMalware@3
  inputs:
    InputType: 'Basic'
    ScanType: 'CustomScan'
    FileDirPath: '$(Build.ArtifactStagingDirectory)'
    EnableServices: false
    SupportLogOnError: false
    TreatSignatureUpdateFailureAs: 'Warning'
    SignatureFreshness: 'UpToDate'
    TreatStaleSignatureAs: 'Error'

- task: PoliCheck@1
  condition: succeededOrFailed()
  inputs:
    targetType: F
    optionsFC: 0
    optionsXS: 0
    optionsPE: '1|2|3|4'
    optionsHMENABLE: 0
    optionsFTPATH: '$(Build.SourcesDirectory)/PowerShellEditorServices/tools/terms/FileTypeSet.xml'
    # toolVersion: 5.8.2.1

- task: CredScan@2
  condition: succeededOrFailed()

# - task: BinSkim@3
#   condition: succeededOrFailed()
#   inputs:
#     InputType: 'Basic'
#     Function: 'analyze'
#     AnalyzeRecurse: true
#     AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\release;$(Build.ArtifactStagingDirectory)\OutGridView*.dll'

# Publish results as artifacts
- task: PublishSecurityAnalysisLogs@3
  condition: succeededOrFailed()
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'

# Publish to TSA server
- task: TSAUpload@1
  condition: succeededOrFailed()
  continueOnError: true
  inputs:
    tsaVersion: 'TsaV2'
    codebase: 'Existing'
    tsaEnvironment: 'PROD'
    codeBaseName: 'PowerShell_PowerShellEditorServices_20190917'
    uploadAPIScan: false
    uploadBinSkim: false
    uploadCredScan: true
    uploadFortifySCA: false
    uploadFxCop: false
    uploadModernCop: false
    uploadPoliCheck: true
    uploadPREfast: false
    uploadRoslyn: false
    uploadTSLint: false
    uploadAsync: true
